 static void Main(string[] args)
        {
            double value = 15.0;
            var fr1 = Fraction.ToFraction(5);
            var fr2 = Fraction.ToFraction(2.4);
 
            Console.WriteLine((fr1 + fr2).ToDouble());
 
            Console.ReadLine();
        }
    public class Fraction
    {
        private int wholePart;
        private uint fractionPart;
 
        public double ToDouble()
        {
            var s = wholePart + "," + fractionPart;
 
            return Convert.ToDouble(s);
        }
 
        public override string ToString()
        {
            return this.ToDouble().ToString("n2");
        }
 
        public static Fraction ToFraction(double value)
        {
            var arr = value.ToString().Split(new char[] {',' }, StringSplitOptions.RemoveEmptyEntries);
 
            return new Fraction()
            {
                wholePart = Convert.ToInt32(arr[0]),
                fractionPart = arr.Length == 2 ? Convert.ToUInt32(arr[1]) : 0
            };
        }
 
        public static Fraction operator +(Fraction a, Fraction b)
        {
            return ToFraction(a.ToDouble() + b.ToDouble()); 
        }
        public static Fraction operator -(Fraction a, Fraction b)
        {
            return ToFraction(a.ToDouble() - b.ToDouble());
        }
        public static Fraction operator *(Fraction a, Fraction b)
        {
            return ToFraction(a.ToDouble() * b.ToDouble());
        }
        public static bool operator ==(Fraction a, Fraction b)
        {
            return a.fractionPart == b.fractionPart && a.wholePart == b.wholePart;
        }
        public static bool operator !=(Fraction a, Fraction b)
        {
            return a.fractionPart != b.fractionPart || a.wholePart != b.wholePart;
        }
    }
