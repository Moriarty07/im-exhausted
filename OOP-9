B1.h
#pragma once
#include<iostream>
using namespace std;
class B1
{
private:
	int b1;
public:
	B1(int b1);
	~B1() {};
	void show_B1();
};

B1.cpp
#include "B1.h"

B1::B1(int b1)
{
	this->b1 = b1;
}

void B1::show_B1()
{
	cout << "class B1:" << endl;
	cout << "show_B1()" << endl
		<< "B1::b1 = " << b1<< endl << endl;
}


B2.h
#pragma once
#include<iostream>
using namespace std;
class B2
{
private:
	int b2;
public:
	B2(int b2);
	~B2() {};
	void show_B2();
};

B2.cpp
#include "B2.h"

B2::B2(int b2)
{
	this->b2 = b2;
}

void B2::show_B2()
{
	cout << "class B2:" << endl;
	cout << "show_B2()" << endl
		<< "B2::b2 = " << b2 << endl << endl;
}
Test.h
#pragma once
#include<iostream>
#include"B2.h"
class Test : private B2
{
private: 
	B2 b2;
public:
	int show_B22() {
		b2.show_B2();
	}
	using B2::show_B2;
};



D1.h
#pragma once
#include<iostream>
#include"B1.h"
#include"B2.h"
using namespace std;
class D1 :public B1, public B2
{
private:
	int d1;
public:
	D1(int d1,int b1,int b2);
	~D1() {};
	void show_D1();
};

D1.cpp
#include "D1.h"

D1::D1(int d1,int b1,int b2) :B1(b1), B2(b2)
{
	this->d1 = d1;
}

void D1::show_D1()
{
	cout << "class D1:" << endl;
	show_B1();
	show_B2();
	cout << "show_D1()" << endl
		<< "D1::d1 = " << d1 << endl << endl;
}
D2.h
#pragma once
#include<iostream>
using namespace std;
class D2
{
private:
	int d2;
public:
	D2(int d2);
	~D2() {};
	void show_D2();
};

D2.cpp
#include "D2.h"

D2::D2(int d2)
{
	this->d2 = d2;
}

void D2::show_D2()
{
	cout << "class D2:" << endl;
	cout << "show_D2()" << endl
		<< "D2::d2 = " << d2 << endl << endl;
}
D3.h
#pragma once
#include<iostream>
#include"D1.h"
#include"D2.h"
class D3 : public D1, public D2
{
private:
	int d3;
public:
	D3(int d3,int d2,int d1,int b2,int b1);
	~D3() {};
	void show_D3();
};

D3.cpp
#include "D3.h"

D3::D3(int d3, int d2, int d1, int b2, int b1) : D2(d2), D1(d1,b1,b2)
{
	this->d3 = d3;
}

void D3::show_D3()
{
	cout << "class D3:" << endl;
	show_D1();
	show_D2();
	cout << "show_D3()" << endl
		<< "D3::d3 = " << d3 << endl << endl;
}
D4.h
#pragma once
#include<iostream>
#include"D3.h"
using namespace std;
class D4 : public D3
{
private:
	int d4;
public:
	D4(int d4,int d3, int d2, int d1, int b2, int b1);
	~D4() {};
	void show_D4();
};

D4.cpp
#include "D4.h"

D4::D4(int d4, int d3, int d2, int d1, int b2, int b1):D3(d3,d2,d1,b2,b1)
{
	this->d4 = d4;
}

void D4::show_D4()
{
	cout << "class D4:" << endl;
	show_D3();
	cout << "show_D4()" << endl
		<< "D4::d4 = " << d4 << endl << endl;
}
OOP9.cpp
#include <iostream>
#include <Windows.h>
#include"D4.h";
int main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    B1 o0(777);
    cout << "B1 o0(777);" << endl;
    cout << "sizeof(B1) = " << sizeof(B1) << endl;
    cout << endl << "Ієрархія класу B1: " << endl;
    o0.show_B1();
    cout << "~~~~~~" << endl;

    B2 o1(111);
    cout << "B2 o1(111);" << endl;
    cout << "sizeof(B2) = " << sizeof(B2) << endl;
    cout << endl << "Ієрархія класу B2: " << endl;
    o1.show_B2();
    cout << "~~~~~~" << endl;
    D1 o2(333,111,222);
    cout << "D1 o2(333,111,222);" << endl;
    cout << "sizeof(D1) = " << sizeof(D1) << endl;
    cout << endl << "Ієрархія класу D1: " << endl;
    o2.show_D1();
    cout << "~~~~~~" << endl;

    D2 o3(444);
    cout << "D2 o3(444);" << endl;
    cout << "sizeof(D2) = " << sizeof(D2) << endl;
    cout << endl << "Ієрархія класу D2: " << endl;
    o3.show_D2();
    cout << "~~~~~~" << endl;

    D3 o4(555,444,333,222,111);
    cout << "D3 o4(555,444,333,222,111);" << endl;
    cout << "sizeof(D3) = " << sizeof(D3) << endl;
    cout << endl << "Ієрархія класу D3: " << endl;
    o4.show_D3();
    cout << "~~~~~~" << endl;

    D4 o5(666, 555, 444, 333, 222, 111);
    cout << "D4 o4(666, 555, 444, 333, 222, 111);" << endl;
    cout << "sizeof(D4) = " << sizeof(D4) << endl;
    cout << endl << "Ієрархія класу D4: " << endl;
    o5.show_D4();
    cout << "~~~~~~" << endl;
}
